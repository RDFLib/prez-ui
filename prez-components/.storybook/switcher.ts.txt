// .storybook/themeSwitcherAddon.ts

import { addons } from '@storybook/manager-api';
// .storybook/themeSwitcherAddon.ts

import { STORY_RENDERED } from '@storybook/core-events';

interface ThemeSwitcherProps {
  currentTheme: string;
  themes: Record<string, string>;
  changeTheme: (theme: string) => void;
}

addons.register('theme-switcher-addon', (api) => {
  let currentTheme = 'default';

  const changeTheme = (theme: string) => {
    currentTheme = theme;
    api.emit(STORY_RENDERED, api.getCurrentStoryData());
  };

  addons.add('theme-switcher-panel', {
    title: 'Theme Switcher',
    type: 'panel',
    render: ({ active }) => {
      if (!active) return null;

      return {
        active,
        title: 'Theme Switcher',
        render: () => ({
          props: {
            currentTheme,
            themes,
            changeTheme,
          } as ThemeSwitcherProps,
          template: `
            <div style="padding: 10px;">
              <h3>Current Theme: {{ themes[currentTheme] }}</h3>
              <select v-model="currentTheme" @change="changeTheme(currentTheme)">
                <option v-for="(theme, key) in themes" :key="key" :value="key">{{ theme }}</option>
              </select>
            </div>
          `,
        }),
      };
    },
  });
});

const themes = {
  default: 'Default Theme',
  primevue: 'PrimeVue Theme',
  // Add more themes as needed
};
